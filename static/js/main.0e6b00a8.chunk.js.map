{"version":3,"sources":["mobX/pokemonsContext.js","api/api.js","components/PokemonCard/PokemonCard.js","components/PokemonsList/PokemonsList.js","App.js","index.js"],"names":["PokemonsProvider","children","store","useLocalStore","pokemons","pokemon","isLoading","isLoadingDetails","error","getPokemons","fetch","then","response","json","pokemonsList","results","map","id","url","match","name","sprite","setError","pokemonsContext","Provider","value","createContext","PokemonCard","useObserver","className","src","alt","PokemonsList","pokemonsStore","useContext","useEffect","key","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"sSAKaA,EAAmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3BC,EAAQC,aAAc,iBAAO,CAEjCC,SAAU,GACVC,QAAS,GACTC,WAAW,EACXC,kBAAkB,EAClBC,MAAO,GAGDC,YAT2B,WASZ,OAAD,iHAClBP,EAAMI,WAAY,EADA,kBCVtBI,MAAM,GAAD,OAJK,6BAIL,aACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDSP,OAGVC,EAHU,OAG2BC,QAE3Cb,EAAME,SAAWU,EAAaE,KAAI,SAAAX,GAChC,IAAMY,EAAKZ,EAAQa,IAAIC,MAAM,oBAAoB,GACzCC,EAASf,EAATe,KACFC,EAAM,mFAA+EJ,EAA/E,QAEZ,OAAO,2BACFZ,GADL,IAEEe,OACAH,KACAI,cAdY,gDAkBhBnB,EAAMoB,SAAN,MAlBgB,QAqBlBpB,EAAMI,WAAY,EArBA,gEAwCtB,OACE,kBAACiB,EAAgBC,SAAjB,CAA0BC,MAAOvB,GAAQD,IAIhCsB,EAAkBG,0BEpDlBC,G,YAAc,SAAC,GAA0B,IAAxBP,EAAuB,EAAvBA,KAAUC,GAAa,EAAjBJ,GAAiB,EAAbI,QAEtC,OAAOO,aAAY,kBACjB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,eACb,4BAAQA,UAAU,SAChB,yBACEC,IAAKT,EACLU,IAAI,cAIV,yBAAKF,UAAU,iBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,SAAST,YCdrBY,EAAe,WAC1B,IAAMC,EAAgBC,qBAAWX,GAMjC,OAJAY,qBAAU,WACRF,EAAcxB,gBACb,IAEImB,aAAY,kBACjB,4BACGK,EAAc3B,UAAY,KACvB2B,EAAc7B,SAASY,KAAI,SAAAX,GAAO,OAClC,wBAAI+B,IAAK/B,EAAQe,MACf,kBAAC,EAAgBf,YAW7B2B,EAAaK,aAAe,GCtBrB,IAAMC,EAAM,WAGjB,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCTRU,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.0e6b00a8.chunk.js","sourcesContent":["import React, { createContext } from \"react\";\n\nimport { useLocalStore } from \"mobx-react-lite\";\nimport { getPokemons, getPokemonByUrl } from '../api/api';\n\nexport const PokemonsProvider = ({ children }) => {\n  const store = useLocalStore(() => ({\n    /* observables */\n    pokemons: [],\n    pokemon: [],\n    isLoading: false,\n    isLoadingDetails: false,\n    error: '',\n\n    /* actions */\n    async getPokemons() {\n      store.isLoading = true;\n      try {\n        const pokemonsList = (await getPokemons()).results;\n\n        store.pokemons = pokemonsList.map(pokemon => {\n          const id = pokemon.url.match(/pokemon\\/(\\d+)\\//)[1];\n          const { name } = pokemon;\n          const sprite = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\n\n          return {\n            ...pokemon,\n            name,\n            id,\n            sprite,\n          };\n        });\n      } catch (e) {\n        store.setError(e);\n      }\n\n      store.isLoading = false;\n    },\n\n    // async getPokemonByUrl(url) {\n    //   store.isLoading = true;\n    //   try {\n    //     const { abilities } = await getPokemonByUrl(url);\n    //     console.log(abilities)\n\n    //     // store.pokemon = data;\n    //   } catch (e) {\n    //     store.setError(e);\n    //   }\n\n    //   store.isLoading = false;\n    // },\n    /* computed values i.e. derived state */\n  }));\n\n  return (\n    <pokemonsContext.Provider value={store}>{children}</pokemonsContext.Provider>\n  );\n};\n\nexport const pokemonsContext = createContext();\n","\nconst API = 'https://pokeapi.co/api/v2/';\nconst POKEMON_LIST = 'https://pokeapi.co/api/v2/pokemon/';\n\nexport const getPokemons = () => (\n  fetch(`${API}pokemon/`)\n    .then(response => response.json())\n);\n\nexport const getPokemonByUrl = (url) => (\n  fetch(`${url}`)\n    .then(response => response.json())\n);\n","import React, { useContext, useEffect } from 'react';\nimport { useObserver } from 'mobx-react-lite';\nimport PropTypes from 'prop-types';\n\nimport './PokemonCard.scss';\n\nimport { pokemonsContext } from '../../mobX/pokemonsContext';\n\nexport const PokemonCard = ({ name, id, sprite }) => {\n\n  return useObserver(() => (\n    <div className=\"card\">\n      <div className=\"card__image\">\n        <figure className=\"image\">\n          <img\n            src={sprite}\n            alt=\"Pokemon\"\n          />\n        </figure>\n      </div>\n      <div className=\"card__content\">\n        <div className=\"media\">\n          <div className=\"media-content\">\n            <p className=\"title\">{name}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  ));\n};\n\nPokemonCard.propTypes = {\n\n};\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useObserver } from 'mobx-react-lite';\n\nimport './PokemonsList.scss';\nimport { pokemonsContext } from '../../mobX/pokemonsContext';\n\nimport { PokemonCard } from '../PokemonCard';\n\nexport const PokemonsList = () => {\n  const pokemonsStore = useContext(pokemonsContext);\n\n  useEffect(() => {\n    pokemonsStore.getPokemons();\n  }, []);\n\n  return useObserver(() => (\n    <ul>\n      {pokemonsStore.isLoading ? null\n        : pokemonsStore.pokemons.map(pokemon => (\n          <li key={pokemon.name}>\n            <PokemonCard {...pokemon} />\n          </li>\n        ))}\n    </ul>\n  ));\n};\n\nPokemonsList.propTypes = {\n\n};\n\nPokemonsList.defaultProps = {\n\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useObserver } from \"mobx-react-lite\";\n\nimport './App.scss';\n\nimport { pokemonsContext, PokemonsProvider } from './mobX/pokemonsContext';\nimport { PokemonsList } from './components/PokemonsList';\n// import { FindPokemons } from './components/FindPokemons';\n// import { Pagination } from './components/Pagination';\n\nexport const App = () => {\n\n\n  return (\n    <div className=\"App\">\n      <PokemonsProvider>\n        <PokemonsList />\n      </PokemonsProvider>\n      {/* <FindPokemons /> */}\n      {/* <Pagination /> */}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}